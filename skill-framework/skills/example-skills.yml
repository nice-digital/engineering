- name: Development process optimisation  
  id: 0
  desc: You contribute to improving development process efficiency and the common ways in which processes are optimised.
  levels:
    - name: Awareness
      examples:
        - You can spot development process inefficiencies and raise issues at standups or retrospectives.
        - You can support specific activities to improve development processes.
    - name: Working
      examples: 
        - You suggest improvements to development process issues
        - You contribute to the implementation of improvements
        - You proactively collaborate with other disciplines throughout the software development lifecycle
    - name: Practitioner
      examples: 
        - You use data to measure development process efficiency and improve outcomes (such as cycle time)
        - You proactively improve the build, test and deploy pipelines to deliver value quickly and safely to production
        - You take ownership of seeing work through to live, not just development
    - name: Expert
      examples: 
        - Not applicable for this role
- name: Information security
  id: 1
  desc: You maintain the security, confidentiality and integrity of information systems through compliance with relevant legislation and regulations. You design, implement and operate controls and management strategies to allow this.
  levels:
    - name: Awareness
      examples:
        - You are aware of the high level risks to the organisation posed by cyber security threats
        - You are aware of the common vulnerabilities listed by [OWASP](https://owasp.org/www-project-top-ten/) that affect web applications and the associated mitigations
        - You can implement security mitigations with guidance
    - name: Working
      examples: 
        - You understand how to apply mitigations to the common vulnerabilities listed by [OWASP](https://owasp.org/www-project-top-ten/) using our [adopted technologies](https://github.com/nice-digital/technology-radar). 
        - You can spot security issues during code reviews and advise on fixes
    - name: Practitioner
      examples: 
        - You proactively model threats to applications during development to identify security risks
        - You can design applications to be secure-by-default
        - You take responsibility for delivering secure software and promote security awareness within your team
    - name: Expert
      examples: 
        - Not applicable for this role
- name: Modern standards approach
  id: 2
  desc: You use a modern standards approach throughout automation and testing.
  levels:
    - name: Awareness
      examples:
        - Not applicable for this role
    - name: Working
      examples: 
        - You use a test-driven approach to writing code, with guidance
        - You can make small changes to fix automated building, packaging and deploying of code changes
    - name: Practitioner
      examples: 
        - You can competently use a test-driven approach, using the testing pyramid appropriately
        - You proactively collaborate with testers to write and review test cases
        - You can competently configure the building, packaging and deploying of code changes
        - You can assist web operations engineers with infrastructure automation scripts
    - name: Expert
      examples: 
        - You demonstrate strong understanding and application test-driven development
        - You ensure the fast building, testing and deploying of code
        - You are familiar with different approaches to building, testing and deploying code
- name: Programming and build
  id: 3
  desc: You can use agreed security standards and specifications to design, create, test and document new or amended software.
  levels:
    - name: Awareness
      examples:
        - You can program simple applications and scripts
        - You can write automated tests with guidance
        - You follow coding best practice
        - You can use one [front-end or back-end programming language/framework](https://nice-digital.github.io/technology-radar/) with guidance
    - name: Working
      examples: 
        - You can deliver features within an existing application architecture, in line with the [GDS Technology Code of Practice](https://www.gov.uk/government/publications/technology-code-of-practice/technology-code-of-practice)
        - You follow best practice, writing well structured and readible code with clear responsibilities
        - You can use one [front-end or back-end programming language/framework](https://nice-digital.github.io/technology-radar/) competently
        - You can apply simple code refactorings to reduce complexity
        - You can find and fix performance issues with guidance
    - name: Practitioner
      examples: 
        - You can lead the delivery of larger features or whole applications, in line with the [GDS Technology Code of Practice](https://www.gov.uk/government/publications/technology-code-of-practice/technology-code-of-practice)
        - You take responsibility for maintaining high quality and low complexity source code
        - You can use several [programming languages/frameworks/technologies](https://nice-digital.github.io/technology-radar/) competently
        - You can competently fix and optimise application performance
        - You find ways to improve system robustness, resilience and security  
    - name: Expert
      examples: 
        - You have deep specialist knowledge in one or more [programming languages/frameworks/technologies](https://nice-digital.github.io/technology-radar/)
        - You are the go-to person for solving hard programming problems
        - You are accountable for the delivery of engineering work with high level of challenge and/or risk
        - You are comfortable working with multiple programming paradigms (imperative, functional, etc).
        - You take a proactive role in researching and evaluating new languages, frameworks, and technologies that would fit a purpose within NICE.
- name: Prototyping
  id: 4
  desc: You can apply technical knowledge and experience to create or design workable prototypes, both programs and physical outputs.
  levels:
    - name: Awareness
      examples:
        - You can explain which technical prototyping methods apply to software development work.
        - You can explain the importance of rapid prototyping
    - name: Working
      examples:    
        - You can develop simple prototyped pages, wireframes or components of an application
        - You are confident in debating and presenting prototypes and working directly with non-technical staff (e.g. UX / design) 
        - You seek feedback quickly to avoid wasted development efforts
    - name: Practitioner
      examples: 
        - You can develop more involved prototypes involving interactions between components or systems
    - name: Expert
      examples: 
        - Not applicable for this role
- name: Systems design
  id: 5
  desc: You can design software with consideration for maintainability, extensibility, performance and security. You can improve the design of a system as it evolves.
  levels:
    - name: Awareness
      examples:
        - You are learning about object-oriented design fundamentals and apply these to your work with guidance (encapsulation, inheritance, abstraction, polymorphism)
        - You have minimal understanding of design patterns
        - You can assist as part of a team on the design of components of larger systems 
    - name: Working
      examples:
        - You understand object-oriented design fundamentals and apply these to your work (encapsulation, inheritance, abstraction, polymorphism)
        - You are learning software design principles and patterns, and are starting to incorporate them 
        - You can apply modular system design to small and medium scale problems
        - You can spot software design problems and apply simple refactorings
        - You understand anti-patterns and the reasons why some approaches are preferred over others (e.g. composition vs inheritance).
    - name: Practitioner
      examples: 
        - You write well-architected object-oriented code
        - You are aware of a range of design patterns and principles and can apply them appropriately
        - You can spot more nuanced software design problems and know a wider range of refactoring techniques
        - You take responsibility for minimising system complexity
        - You advise on overall application design
    - name: Expert
      examples: 
        - Not applicable for this role
- name: Systems integration
  id: 6
  desc: You can plan, build and test the integration of software systems.
  levels:
    - name: Awareness
      examples:
        - You can integrate and test components, systems and their interfaces with supervision
        - You understand that distributed systems will fail and the implications this can have on dependant systems
    - name: Working
      examples: 
        - You can write code to integrate API's/components/systems in a way that is resilient to failure using [common patterns](https://en.wikipedia.org/wiki/Circuit_breaker_design_pattern)
        - You can write tests that test system integration 
        - You design and build well documented API's and interfaces for use by other developers
        - You can debug problems with integrated systems with guidance
    - name: Practitioner
      examples:
        - You plan system integrations to avoid risks of large scale change (big bang) 
        - You ensure integration testing is efficient and appropriate 
        - You can evolve interfaces to maintain compatibility whilst enabling new functionality
        - You can use different [patterns](https://docs.microsoft.com/en-us/azure/architecture/patterns/) to integrating systems
        - You can debug performance problems with integrated systems
    - name: Expert
      examples: 
        - Not applicable for this role
- name: Service support
  id: 7
  desc: You can maintain and support services.
  levels:
    - name: Awareness
      examples:
        - You work with other developers to investigate and fix issues
    - name: Working
      examples: 
        - You can help fix live service issues with guidance
    - name: Practitioner
      examples: 
        - You take responsibility for meeting live service issue [SLAs](https://nicedigital.atlassian.net/wiki/spaces/AS/pages/581796008/Problem+Management+Process) 
        - You proactively monitor services to identify, locate and fix faults.
    - name: Expert
      examples: 
        - Not applicable for this role
- name: User focus
  id: 8
  desc: You understand users and can identify who they are and what their needs are, based on evidence. You can translate user stories and propose design approaches or services to meet these needs and engage in meaningful interactions and relationships with users. You put users first.
  levels:
    - name: Awareness
      examples:
        - You understand the importance of understanding and meeting user needs
        - You observe user research and users testing your software
    - name: Working
      examples: 
        - You can explain who your users are and the tasks that they are trying to do
        - You can identify the KPI’s that demonstrate successful user outcomes for your teams services
        - You proactively engage with business analysts and users to clarify requirements and negotiate implementation options
    - name: Practitioner
      examples: 
        - You champion user research to focus on all users
        - You enable developers on your team to observe user research and testing
        - You seek early and regular user feedback during development to validate user satisfaction
    - name: Expert
      examples: 
        - Not applicable for this role
- name: Community participation
  id: 9
  desc: You share your work and learn from other developers working across NICE Digital.
  levels:
    - name: Awareness
      examples:
        - You participate in some community events, such as code training, talks and discussions.
    - name: Working
      examples: 
        - You occasionally promote your team’s technical work via tech talks or blog posts, with guidance
        - You contribute to community discussions
    - name: Practitioner
      examples: 
        - You run coding sessions, or more in-depth technical community sessions 
        - You promote your team's technical work and methods
        - You promote participation and contribution to community events, especially to your team members.
        - You can deliver training on your areas of expertise
    - name: Expert
      examples: 
        - Not applicable for this role
- name: Developing others
  id: 10
  desc: You help others to develop their skills
  levels:
    - name: Awareness
      examples:
        - You can point others to learning resources
    - name: Working
      examples: 
        - You can assist others in solving specific technical problems
        - You give specific, actionable feedback on skill development through pair programming or code reviews
    - name: Practitioner
      examples: 
        - You develop skill by using a question-led approach to guide others through problems without giving solutions
        - You delegate appropriately challenging tasks to others on your team to aid skill development
        - You can assess the skill level of others during recruitment
    - name: Expert
      examples: 
        - You create a positive, engaging, safe and supportive environment for team members to grow and do their best work.
        - You spend a signifant proportion of your time supporting and mentoring others on your team  
        - You enable and support longer-term career development planning for developers


        