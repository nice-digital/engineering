- name: Development process optimisation  
  id: 0
  desc: You contribute to improving development process efficiency and the common ways in which processes are optimised.
  levels:
    - name: Awareness
      examples:
        - You can spot development process inefficiencies and raise issues at standups or retrospectives.
        - You can support specific activities to improve development processes.
    - name: Working
      examples: 
        - You suggest improvements to development process issues
        - You contribute to the implementation of improvements
        - You proactively collaborate with other disciplines throughout the software development lifecycle
    - name: Practitioner
      examples: 
        - You use data to measure development process efficiency and improve outcomes (such as cycle time)
        - You proactively improve the build, test and deploy pipelines to deliver value quickly and safely to production
        - You take ownership of seeing work through to live, not just development
    - name: Expert
      examples: 
        - Not applicable for this role
- name: Information security
  id: 1
  desc: You maintain the security, confidentiality and integrity of information systems through compliance with relevant legislation and regulations. You design, implement and operate controls and management strategies to allow this.
  levels:
    - name: Awareness
      examples:
        - You are aware of the high level risks to the organisation posed by cyber security threats
        - You are aware of the common vulnerabilities listed by [OWASP](https://owasp.org/www-project-top-ten/) that affect web applications and the associated mitigations
        - You can implement security mitigations with guidance
    - name: Working
      examples: 
        - You understand how to apply mitigations to the common vulnerabilities listed by [OWASP](https://owasp.org/www-project-top-ten/) using our [adopted technologies](https://github.com/nice-digital/technology-radar). 
        - You can spot security issues during code reviews and advise on fixes
    - name: Practitioner
      examples: 
        - You proactively model threats to applications during development to identify security risks
        - You can design applications to be secure-by-default
        - You take responsibility for delivering secure software and promote security awareness within your team
    - name: Expert
      examples: 
        - Not applicable for this role
- name: Modern standards approach
  id: 2
  desc: You use a modern standards approach throughout automation and testing.
  levels:
    - name: Awareness
      examples:
        - Not applicable for this role
    - name: Working
      examples: 
        - You use a test-driven approach with guidance
        - You can make small changes to fix automated build pipelines
    - name: Practitioner
      examples: 
        - You can competently use a test-driven approach
        - You can competently configure build and deploy pipelines
        - You proactively collaborate with testers to write tests
    - name: Expert
      examples: 
        - You demonstrate strong understanding and application test-driven development
        - You advise on the correct level of test automation to use
        - You ensure automation enables fast and iterative build deployments
        - You coach and guide others
- name: Programming and build
  id: 3
  desc: You can use agreed security standards and specifications to design, create, test and document new or amended software.
  levels:
    - name: Awareness
      examples:
        - You can program simple applications and scripts
        - You can write automated tests with guidance
    - name: Working
      examples: 
        - You can design, build and test production quality software for **small to medium** scale applications
        - You can use one programming language in the correct way
        - You can write well structured and readible code with clear responsibilities
        - You can apply simple code refactorings
        - You can find and fix performance issues with guidance
    - name: Practitioner
      examples: 
        - You can design, build and test production quality software for **medium to large** scale applications
        - You can apply trickier structural code refactorings
        - You can competently find and fix performance issues
        - You monitor key software quality metrics (code coverage, application error logs) to maintain appropriate quality
        - You can optimise application performance
    - name: Expert
      examples: 
        - You have deep specialist knowledge in one or more technologies
        - You can apply refactorings to complex legacy codebases
        - You are the go-to person for solving hard programming problems
- name: Prototyping
  id: 4
  desc: You can apply technical knowledge and experience to create or design workable prototypes, both programs and physical outputs.
  levels:
    - name: Awareness
      examples:
        - You can explain which technical prototyping methods apply to software development work.
        - You can explain the importance of rapid prototyping
    - name: Working
      examples:    
        - You can develop simple prototyped pages or components of an application
        - You seek feedback quickly to avoid wasted development efforts
    - name: Practitioner
      examples: 
        - You can develop more involved prototypes involving interactions between components or systems
    - name: Expert
      examples: 
        - Not applicable for this role
- name: Systems design
  id: 5
  desc: You can design software with consideration for maintainability, extensibility, performance and security. You can improve the design of a system as it evolves.
  levels:
    - name: Awareness
      examples:
        - You can assist as part of a team on design of components of larger systems 
        - You understand about software design concepts such as interfaces, low coupling and high cohesion
    - name: Working
      examples: 
        - You can design maintainable, extensible and performant application architectures for **small to medium** scale applications
        - You can design components within the existing architecture of larger systems
        - You can identify different design options and discuss the tradeoffs
        - You can spot software design problems and apply refactorings with guidance
    - name: Practitioner
      examples: 
        - You can design maintainable, extensible and performant application architectures for **medium to large** scale applications
        - You take responsibility for the health of overall application architecture
        - You proactively improve system design through refactorings 
        - You advise on appropriate technology usage for the build using guidance from the [technology radar](https://github.com/nice-digital/technology-radar) governance framework
    - name: Expert
      examples: 
        - Not applicable for this role
- name: Systems integration
  id: 6
  desc: You can plan, build and test the integration of software systems.
  levels:
    - name: Awareness
      examples:
        - You can integrate and test components, systems and their interfaces with supervision
        - You understand that distributed systems will fail and the implications this can have on dependant systems
    - name: Working
      examples: 
        - You can write code to integrate systems in a way that is resilient to failure using [common patterns](https://en.wikipedia.org/wiki/Circuit_breaker_design_pattern)
        - You can write tests that test system integration 
        - You design and build well documented API's and interfaces
        - You can debug problems with integrated systems with guidance
    - name: Practitioner
      examples:
        - You plan system integrations to avoid risks of large scale change (big bang) 
        - You ensure integration testing is efficient and appropriate 
        - You can evolve interfaces to maintain compatibility whilst enabling new functionality
        - You can use different [patterns](https://docs.microsoft.com/en-us/azure/architecture/patterns/) to integrating systems
        - You can debug performance problems with integrated systems
    - name: Expert
      examples: 
        - Not applicable for this role
- name: Service support
  id: 7
  desc: You can maintain and support services.
  levels:
    - name: Awareness
      examples:
        - You work with other developers to investigate and fix issues
    - name: Working
      examples: 
        - You can help fix live service issues with guidance
    - name: Practitioner
      examples: 
        - You take responsibility for meeting live service issue [SLAs](https://nicedigital.atlassian.net/wiki/spaces/AS/pages/581796008/Problem+Management+Process) 
        - You proactively monitor services to identify, locate and fix faults.
    - name: Expert
      examples: 
        - Not applicable for this role
- name: User focus
  id: 8
  desc: You understand users and can identify who they are and what their needs are, based on evidence. You can translate user stories and propose design approaches or services to meet these needs and engage in meaningful interactions and relationships with users. You put users first.
  levels:
    - name: Awareness
      examples:
        - You understand the importance of understanding and meeting user needs
        - You observe user research and users testing your software
    - name: Working
      examples: 
        - You can explain who your users are and the tasks that they are trying to do
        - You can identify the KPIâ€™s that demonstrate successful user outcomes for your teams services
        - You proactively engage with business analysts and users to clarify requirements and negotiate implementation options
    - name: Practitioner
      examples: 
        - You champion user research to focus on all users
        - You enable developers on your team to observe user research and testing
        - You seek early and regular user feedback during development to validate user satisfaction
    - name: Expert
      examples: 
        - Not applicable for this role
- name: Community participation
  id: 9
  desc: You share your work and learn from other developers working across NICE Digital.
  levels:
    - name: Awareness
      examples:
        - You understand the benefits of being a member of a software development community
        - You ask for help and advice from the community to improve your skills
        - You attend internal community events relevant to your work
    - name: Working
      examples: 
        - You promote your teamâ€™s technical work via lightning talks, in-depth sessions or blog posts with guidance
    - name: Practitioner
      examples: 
        - You take responsibility for sharing your teams technical work and methods with the wider development community
        - You identify opportunities to reuse solutions and avoid duplicating effort
        - You encourage others to participate in community activities
    - name: Expert
      examples: 
        - Not applicable for this role
- name: Developing others
  id: 10
  desc: You help others to develop their skills
  levels:
    - name: Awareness
      examples:
        - You can point others to learning resources
    - name: Working
      examples: 
        - You can assist others in solving specific technical problems
        - You give specific, actionable feedback on skill development through pair programming or code reviews
    - name: Practitioner
      examples: 
        - You develop skill by using a question-led approach to guide others through problems without giving solutions
        - You identify work opportunities for others to develop their skill
        - You can assess the skill level of others during recruitment
    - name: Expert
      examples: 
        - You are responsible of the wellbeing of developers on your team 
        - You motivate developers on your team by providing them with a supportive environment for learning (impact, choice, improvement)
        - You enable and support career development planning for developers
        - You assign stretch opportunities to develop skill of others


        